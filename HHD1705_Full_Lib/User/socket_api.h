/*******************************************************************************************************
  * Company: Hiwafer Technology Co., Ltd.
  ******************************************************************************************************
  * 文件名称：socket_api.h
  * 功能说明：
  * 版    本：V1.0
  * 作    者：EnderWigg	
  * 日    期：2019.4.10
  *
  * 该文件用于配置库文件相关功能
*******************************************************************************************************/
#ifndef __SOCKET_API__
#define __SOCKET_API__
#include "hhd32f10x_conf.h"


typedef void ( *RECV_CALLBACK)(uint8_t *data, int len);
/*protocol states */
enum states
{
  ES_NOT_CONNECTED = 0,
  ES_CONNECTED,
  ES_ACCEPTED,	
  ES_RECEIVED,
  ES_CLOSING,
};



/* structure to be passed as argument to the tcp callbacks */
struct socket_info
{
  enum states state;     /* connection status */
  struct tcp_pcb *pcb;          /* pointer on the current tcp_pcb */
  struct pbuf *p_tx;            /* pointer on pbuf to be transmitted */
  RECV_CALLBACK recv_callback;

};

///////////////////////////////////////////////////////////////////////////////////////////////// 
/////////////////////////////////////SERVER API////////////////////////////////////////////////// 
/////////////////////////////////////////////////////////////////////////////////////////////////


/************************************************************************************************
 * 使用本机IP创建TCP服务器
 *  port 服务器监听的端口号
 *  recv_callback 处理接收到的数据的回调函数
 * 
 ************************************************************************************************/
struct socket_info *socket_server(uint16_t port,  RECV_CALLBACK recv_callback);

/************************************************************************************************
*
*	向客户端发送数据
*
*
************************************************************************************************/
int16_t socket_server_write(struct socket_info * es, void *msg, uint16_t len);


/************************************************************************************************
*
*	关闭连接
*
*
************************************************************************************************/
 void socket_server_close(struct socket_info * es);
 
 
 
///////////////////////////////////////////////////////////////////////////////////////////////// 
/////////////////////////////////////CLIENT API////////////////////////////////////////////////// 
///////////////////////////////////////////////////////////////////////////////////////////////// 
 

/***********************************************************************************************
*
*	创建一个tcp 客户端连接
*   destip 服务器IP 4字节数组
*   port   端口号
*   recv_callback 接收数据回调函数，在该函数中接收数据并处理数据
* 返回值
*   连接成功则返回 client 指针，否则为 NULL 
***********************************************************************************************/ 
struct socket_info * socket_client(const uint8_t *ip, uint16_t port, 
												void ( *recv_callback)(uint8_t *data, int len));
/***********************************************************************************************
*
*	向服务器发送数据
*
*
***********************************************************************************************/ 
int16_t socket_client_write(struct socket_info * es, void *msg, uint16_t len);

/***********************************************************************************************
*
*	关闭连接
*
***********************************************************************************************/ 
void socket_client_close(struct socket_info * es);

#endif

